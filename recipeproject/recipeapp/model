# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccessionNumber(models.Model):
    id = models.BigIntegerField(primary_key=True)
    number = models.CharField(max_length=9)
    compound_id = models.BigIntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    source_id = models.FloatField(blank=True, null=True)
    source_type = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'accession_number'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Compound(models.Model):
    id = models.BigIntegerField(primary_key=True)
    public_id = models.CharField(max_length=9)
    name = models.TextField()
    moldb_iupac = models.TextField(blank=True, null=True)  # This field type is a guess.
    state = models.TextField(blank=True, null=True)  # This field type is a guess.
    annotation_quality = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    cas_number = models.TextField(blank=True, null=True)
    moldb_inchikey = models.TextField(blank=True, null=True)
    moldb_inchi = models.FloatField(blank=True, null=True)
    moldb_smiles = models.TextField(blank=True, null=True)
    moldb_mono_mass = models.TextField(blank=True, null=True)
    kingdom = models.TextField(blank=True, null=True)
    superklass = models.TextField(blank=True, null=True)
    klass = models.TextField(blank=True, null=True)
    subklass = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'compound'


class CompoundAlternateParent(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField(blank=True, null=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    creator_id = models.FloatField(blank=True, null=True)
    updater_id = models.FloatField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'compound_alternate_parent'


class CompoundExternalDescriptor(models.Model):
    id = models.BigIntegerField(primary_key=True)
    external_id = models.TextField()
    annotations = models.TextField()
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    creator_id = models.FloatField(blank=True, null=True)
    updater_id = models.FloatField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'compound_external_descriptor'


class CompoundOntologyTerm(models.Model):
    id = models.BigIntegerField(primary_key=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    export = models.BooleanField(blank=True, null=True)
    ontology_term = models.ForeignKey('OntologyTerm', models.DO_NOTHING)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'compound_ontology_term'


class CompoundSubstituent(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField(blank=True, null=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'compound_substituent'


class CompoundSynonym(models.Model):
    id = models.BigIntegerField(primary_key=True)
    synonym = models.TextField()
    synonym_source = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    source_id = models.BigIntegerField()
    source_type = models.TextField()  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'compound_synonym'


class CompoundsEnzyme(models.Model):
    id = models.BigIntegerField(primary_key=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    enzyme = models.ForeignKey('Enzyme', models.DO_NOTHING)
    citations = models.TextField()  # This field type is a guess.
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'compounds_enzyme'


class CompoundsFlavor(models.Model):
    id = models.BigIntegerField(primary_key=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    flavor = models.ForeignKey('Flavor', models.DO_NOTHING)
    citations = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    creator_id = models.FloatField(blank=True, null=True)
    updater_id = models.FloatField(blank=True, null=True)
    source_id = models.BigIntegerField()
    source_type = models.TextField()  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'compounds_flavor'


class CompoundsHealthEffect(models.Model):
    id = models.BigIntegerField(primary_key=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    health_effect = models.ForeignKey('HealthEffect', models.DO_NOTHING)
    orig_health_effect_name = models.TextField()
    orig_compound_name = models.TextField()
    citation = models.TextField()  # This field type is a guess.
    citation_type = models.TextField()  # This field type is a guess.
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    source_id = models.BigIntegerField()
    source_type = models.TextField()  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'compounds_health_effect'


class CompoundsPathway(models.Model):
    id = models.BigIntegerField(primary_key=True)
    compound = models.ForeignKey(Compound, models.DO_NOTHING)
    pathway = models.ForeignKey('Pathway', models.DO_NOTHING)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'compounds_pathway'


class Content(models.Model):
    id = models.BigIntegerField(primary_key=True)
    source_id = models.BigIntegerField()
    source_type = models.TextField()  # This field type is a guess.
    food = models.ForeignKey('Food', models.DO_NOTHING)
    orig_food_id = models.TextField(blank=True, null=True)
    orig_food_common_name = models.TextField(blank=True, null=True)
    orig_food_scientific_name = models.TextField(blank=True, null=True)
    orig_food_part = models.TextField(blank=True, null=True)
    orig_source_id = models.TextField(blank=True, null=True)
    orig_source_name = models.TextField(blank=True, null=True)
    orig_content = models.FloatField(blank=True, null=True)
    orig_min = models.FloatField(blank=True, null=True)
    orig_max = models.FloatField(blank=True, null=True)
    orig_unit = models.TextField(blank=True, null=True)
    orig_citation = models.TextField(blank=True, null=True)
    citation = models.TextField()
    citation_type = models.TextField()  # This field type is a guess.
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    orig_method = models.TextField(blank=True, null=True)
    orig_unit_expression = models.TextField(blank=True, null=True)
    standard_content = models.FloatField(blank=True, null=True)
    preparation_type = models.TextField(blank=True, null=True)
    export = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'content'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Enzyme(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField()
    gene_name = models.TextField()
    description = models.FloatField(blank=True, null=True)
    go_classification = models.FloatField(blank=True, null=True)
    general_function = models.FloatField(blank=True, null=True)
    specific_function = models.FloatField(blank=True, null=True)
    pathway = models.FloatField(blank=True, null=True)
    reaction = models.FloatField(blank=True, null=True)
    cellular_location = models.FloatField(blank=True, null=True)
    signals = models.FloatField(blank=True, null=True)
    transmembrane_regions = models.FloatField(blank=True, null=True)
    molecular_weight = models.FloatField(blank=True, null=True)
    theoretical_pi = models.FloatField(blank=True, null=True)
    locus = models.FloatField(blank=True, null=True)
    chromosome = models.FloatField(blank=True, null=True)
    uniprot_name = models.FloatField(blank=True, null=True)
    uniprot_id = models.TextField()
    pdb_id = models.FloatField(blank=True, null=True)
    genbank_protein_id = models.FloatField(blank=True, null=True)
    genbank_gene_id = models.FloatField(blank=True, null=True)
    genecard_id = models.FloatField(blank=True, null=True)
    genatlas_id = models.FloatField(blank=True, null=True)
    hgnc_id = models.FloatField(blank=True, null=True)
    hprd_id = models.FloatField(blank=True, null=True)
    organism = models.FloatField(blank=True, null=True)
    general_citations = models.FloatField(blank=True, null=True)
    comments = models.FloatField(blank=True, null=True)
    creator_id = models.FloatField(blank=True, null=True)
    updater_id = models.FloatField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'enzyme'


class Flavor(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField()
    flavor_group = models.TextField(blank=True, null=True)
    category = models.TextField()  # This field type is a guess.
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'flavor'


class Food(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField()
    name_scientific = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    itis_id = models.FloatField(blank=True, null=True)
    wikipedia_id = models.TextField(blank=True, null=True)
    picture_file_name = models.TextField(blank=True, null=True)
    picture_content_type = models.TextField(blank=True, null=True)
    picture_file_size = models.FloatField(blank=True, null=True)
    picture_updated_at = models.DateTimeField(blank=True, null=True)
    legacy_id = models.FloatField(blank=True, null=True)
    food_group = models.TextField(blank=True, null=True)
    food_subgroup = models.TextField(blank=True, null=True)
    food_type = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    export_to_afcdb = models.BooleanField()
    category = models.TextField(blank=True, null=True)  # This field type is a guess.
    ncbi_taxonomy_id = models.FloatField(blank=True, null=True)
    export_to_foodb = models.BooleanField()
    public_id = models.TextField()

    class Meta:
        managed = False
        db_table = 'food'


class FoodTaxonomy(models.Model):
    id = models.BigIntegerField(primary_key=True)
    food = models.ForeignKey(Food, models.DO_NOTHING)
    ncbi_taxonomy_id = models.BigIntegerField()
    classification_name = models.TextField()
    classification_order = models.BigIntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'food_taxonomy'


class HealthEffect(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField()
    description = models.TextField(blank=True, null=True)
    chebi_name = models.TextField(blank=True, null=True)
    chebi_id = models.FloatField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    chebi_definition = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'health_effect'


class Ingredient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField()

    class Meta:
        managed = False
        db_table = 'ingredient'


class NcbiTaxonomyMap(models.Model):
    id = models.BigIntegerField(primary_key=True)
    taxonomyname = models.TextField(db_column='TaxonomyName')  # Field name made lowercase.
    rank = models.TextField(db_column='Rank')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'ncbi_taxonomy_map'


class Nutrient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    legacy_id = models.FloatField(blank=True, null=True)
    public_id = models.TextField()
    name = models.TextField()
    export = models.BooleanField()
    annotation_quality = models.TextField()
    description = models.TextField(blank=True, null=True)
    wikipedia_id = models.TextField(blank=True, null=True)
    comments = models.FloatField(blank=True, null=True)
    dfc_id = models.FloatField(blank=True, null=True)
    duke_id = models.TextField(blank=True, null=True)
    eafus_id = models.FloatField(blank=True, null=True)
    dfc_name = models.FloatField(blank=True, null=True)
    compound_source = models.TextField()
    metabolism = models.FloatField(blank=True, null=True)
    synthesis_citations = models.FloatField(blank=True, null=True)
    general_citations = models.FloatField(blank=True, null=True)
    creator_id = models.FloatField(blank=True, null=True)
    updater_id = models.FloatField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'nutrient'


class OntologySynonym(models.Model):
    id = models.BigIntegerField(primary_key=True)
    ontology_term = models.ForeignKey('OntologyTerm', models.DO_NOTHING)
    synonym = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'ontology_synonym'


class OntologyTerm(models.Model):
    id = models.BigIntegerField(primary_key=True)
    term = models.TextField()
    definition = models.TextField(blank=True, null=True)
    external_id = models.TextField(blank=True, null=True)
    external_source = models.TextField(blank=True, null=True)
    comment = models.TextField(blank=True, null=True)
    curator = models.TextField(blank=True, null=True)
    parent_id = models.FloatField(blank=True, null=True)
    level = models.FloatField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'ontology_term'


class Pathway(models.Model):
    id = models.BigIntegerField(primary_key=True)
    smpdb_id = models.TextField()
    kegg_map_id = models.TextField(blank=True, null=True)
    name = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'pathway'


class PpRecipes(models.Model):
    id = models.BigIntegerField(primary_key=True)
    i = models.BigIntegerField(blank=True, null=True)
    name_tokens = models.TextField(blank=True, null=True)
    ingredient_tokens = models.TextField(blank=True, null=True)
    steps_tokens = models.TextField(blank=True, null=True)
    techniques = models.TextField(blank=True, null=True)
    calorie_level = models.BigIntegerField(blank=True, null=True)
    ingredient_ids = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pp_recipes'


class PpUsers(models.Model):
    u = models.BigIntegerField(primary_key=True)
    techniques = models.TextField(blank=True, null=True)
    items = models.TextField(blank=True, null=True)
    n_items = models.BigIntegerField(blank=True, null=True)
    ratings = models.TextField(blank=True, null=True)
    n_ratings = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pp_users'


class RawInteractions(models.Model):
    user_id = models.BigIntegerField()
    recipe_id = models.BigIntegerField(primary_key=True)
    date = models.TextField(blank=True, null=True)
    rating = models.BigIntegerField(blank=True, null=True)
    review = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'raw_interactions'
        unique_together = (('recipe_id', 'user_id'),)


class RawRecipes(models.Model):
    name = models.TextField(blank=True, null=True)
    id = models.BigIntegerField(primary_key=True)
    minutes = models.BigIntegerField(blank=True, null=True)
    contributor_id = models.BigIntegerField(blank=True, null=True)
    submitted = models.TextField(blank=True, null=True)
    tags = models.TextField(blank=True, null=True)
    nutrition = models.TextField(blank=True, null=True)
    n_steps = models.BigIntegerField(blank=True, null=True)
    steps = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    ingredients = models.TextField(blank=True, null=True)
    n_ingredients = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'raw_recipes'


class RecipeIngredient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    recipe = models.ForeignKey(RawRecipes, models.DO_NOTHING, blank=True, null=True)
    ingredient = models.ForeignKey(Ingredient, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recipe_ingredient'


class RecipeIngredientFood(models.Model):
    id = models.BigIntegerField(primary_key=True)
    food = models.ForeignKey(Food, models.DO_NOTHING)
    ingredient = models.ForeignKey(Ingredient, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recipe_ingredient_food'


class Reference(models.Model):
    id = models.BigIntegerField(primary_key=True)
    ref_type = models.TextField()
    text = models.TextField()
    pubmed_id = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    source_id = models.BigIntegerField()
    source_type = models.TextField()  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'reference'
