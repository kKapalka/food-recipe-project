# Generated by Django 4.1.7 on 2023-03-17 18:37

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessionNumber',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('number', models.CharField(max_length=9)),
                ('compound_id', models.BigIntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('source_id', models.FloatField(blank=True, null=True)),
                ('source_type', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'accession_number',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('public_id', models.CharField(max_length=9)),
                ('name', models.TextField()),
                ('moldb_iupac', models.TextField(blank=True, null=True)),
                ('state', models.TextField(blank=True, null=True)),
                ('annotation_quality', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cas_number', models.TextField(blank=True, null=True)),
                ('moldb_inchikey', models.TextField(blank=True, null=True)),
                ('moldb_inchi', models.FloatField(blank=True, null=True)),
                ('moldb_smiles', models.TextField(blank=True, null=True)),
                ('moldb_mono_mass', models.TextField(blank=True, null=True)),
                ('kingdom', models.TextField(blank=True, null=True)),
                ('superklass', models.TextField(blank=True, null=True)),
                ('klass', models.TextField(blank=True, null=True)),
                ('subklass', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compound',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundAlternateParent',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('creator_id', models.FloatField(blank=True, null=True)),
                ('updater_id', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'compound_alternate_parent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundExternalDescriptor',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('external_id', models.TextField()),
                ('annotations', models.TextField()),
                ('creator_id', models.FloatField(blank=True, null=True)),
                ('updater_id', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'compound_external_descriptor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundOntologyTerm',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('export', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'compound_ontology_term',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundsEnzyme',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('citations', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'compounds_enzyme',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundsFlavor',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('citations', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('creator_id', models.FloatField(blank=True, null=True)),
                ('updater_id', models.FloatField(blank=True, null=True)),
                ('source_id', models.BigIntegerField()),
                ('source_type', models.TextField()),
            ],
            options={
                'db_table': 'compounds_flavor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundsHealthEffect',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('orig_health_effect_name', models.TextField()),
                ('orig_compound_name', models.TextField()),
                ('citation', models.TextField()),
                ('citation_type', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('source_id', models.BigIntegerField()),
                ('source_type', models.TextField()),
            ],
            options={
                'db_table': 'compounds_health_effect',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundsPathway',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'compounds_pathway',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundSubstituent',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'compound_substituent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundSynonym',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('synonym', models.TextField()),
                ('synonym_source', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('source_id', models.BigIntegerField()),
                ('source_type', models.TextField()),
            ],
            options={
                'db_table': 'compound_synonym',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('source_id', models.BigIntegerField()),
                ('source_type', models.TextField()),
                ('orig_food_id', models.TextField(blank=True, null=True)),
                ('orig_food_common_name', models.TextField(blank=True, null=True)),
                ('orig_food_scientific_name', models.TextField(blank=True, null=True)),
                ('orig_food_part', models.TextField(blank=True, null=True)),
                ('orig_source_id', models.TextField(blank=True, null=True)),
                ('orig_source_name', models.TextField(blank=True, null=True)),
                ('orig_content', models.FloatField(blank=True, null=True)),
                ('orig_min', models.FloatField(blank=True, null=True)),
                ('orig_max', models.FloatField(blank=True, null=True)),
                ('orig_unit', models.TextField(blank=True, null=True)),
                ('orig_citation', models.TextField(blank=True, null=True)),
                ('citation', models.TextField()),
                ('citation_type', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('orig_method', models.TextField(blank=True, null=True)),
                ('orig_unit_expression', models.TextField(blank=True, null=True)),
                ('standard_content', models.FloatField(blank=True, null=True)),
                ('preparation_type', models.TextField(blank=True, null=True)),
                ('export', models.BigIntegerField()),
            ],
            options={
                'db_table': 'content',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Enzyme',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('gene_name', models.TextField()),
                ('description', models.FloatField(blank=True, null=True)),
                ('go_classification', models.FloatField(blank=True, null=True)),
                ('general_function', models.FloatField(blank=True, null=True)),
                ('specific_function', models.FloatField(blank=True, null=True)),
                ('pathway', models.FloatField(blank=True, null=True)),
                ('reaction', models.FloatField(blank=True, null=True)),
                ('cellular_location', models.FloatField(blank=True, null=True)),
                ('signals', models.FloatField(blank=True, null=True)),
                ('transmembrane_regions', models.FloatField(blank=True, null=True)),
                ('molecular_weight', models.FloatField(blank=True, null=True)),
                ('theoretical_pi', models.FloatField(blank=True, null=True)),
                ('locus', models.FloatField(blank=True, null=True)),
                ('chromosome', models.FloatField(blank=True, null=True)),
                ('uniprot_name', models.FloatField(blank=True, null=True)),
                ('uniprot_id', models.TextField()),
                ('pdb_id', models.FloatField(blank=True, null=True)),
                ('genbank_protein_id', models.FloatField(blank=True, null=True)),
                ('genbank_gene_id', models.FloatField(blank=True, null=True)),
                ('genecard_id', models.FloatField(blank=True, null=True)),
                ('genatlas_id', models.FloatField(blank=True, null=True)),
                ('hgnc_id', models.FloatField(blank=True, null=True)),
                ('hprd_id', models.FloatField(blank=True, null=True)),
                ('organism', models.FloatField(blank=True, null=True)),
                ('general_citations', models.FloatField(blank=True, null=True)),
                ('comments', models.FloatField(blank=True, null=True)),
                ('creator_id', models.FloatField(blank=True, null=True)),
                ('updater_id', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'enzyme',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Flavor',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('flavor_group', models.TextField(blank=True, null=True)),
                ('category', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'flavor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('name_scientific', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('itis_id', models.FloatField(blank=True, null=True)),
                ('wikipedia_id', models.TextField(blank=True, null=True)),
                ('picture_file_name', models.TextField(blank=True, null=True)),
                ('picture_content_type', models.TextField(blank=True, null=True)),
                ('picture_file_size', models.FloatField(blank=True, null=True)),
                ('picture_updated_at', models.DateTimeField(blank=True, null=True)),
                ('legacy_id', models.FloatField(blank=True, null=True)),
                ('food_group', models.TextField(blank=True, null=True)),
                ('food_subgroup', models.TextField(blank=True, null=True)),
                ('food_type', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('export_to_afcdb', models.BooleanField()),
                ('category', models.TextField(blank=True, null=True)),
                ('ncbi_taxonomy_id', models.FloatField(blank=True, null=True)),
                ('export_to_foodb', models.BooleanField()),
                ('public_id', models.TextField()),
            ],
            options={
                'db_table': 'food',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FoodTaxonomy',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('ncbi_taxonomy_id', models.BigIntegerField()),
                ('classification_name', models.TextField()),
                ('classification_order', models.BigIntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'food_taxonomy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HealthEffect',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('chebi_name', models.TextField(blank=True, null=True)),
                ('chebi_id', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('chebi_definition', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'health_effect',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NcbiTaxonomyMap',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('taxonomyname', models.TextField(db_column='TaxonomyName')),
                ('rank', models.TextField(db_column='Rank')),
            ],
            options={
                'db_table': 'ncbi_taxonomy_map',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('legacy_id', models.FloatField(blank=True, null=True)),
                ('public_id', models.TextField()),
                ('name', models.TextField()),
                ('export', models.BooleanField()),
                ('annotation_quality', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('wikipedia_id', models.TextField(blank=True, null=True)),
                ('comments', models.FloatField(blank=True, null=True)),
                ('dfc_id', models.FloatField(blank=True, null=True)),
                ('duke_id', models.TextField(blank=True, null=True)),
                ('eafus_id', models.FloatField(blank=True, null=True)),
                ('dfc_name', models.FloatField(blank=True, null=True)),
                ('compound_source', models.TextField()),
                ('metabolism', models.FloatField(blank=True, null=True)),
                ('synthesis_citations', models.FloatField(blank=True, null=True)),
                ('general_citations', models.FloatField(blank=True, null=True)),
                ('creator_id', models.FloatField(blank=True, null=True)),
                ('updater_id', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'nutrient',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OntologySynonym',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('synonym', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'ontology_synonym',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OntologyTerm',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('term', models.TextField()),
                ('definition', models.TextField(blank=True, null=True)),
                ('external_id', models.TextField(blank=True, null=True)),
                ('external_source', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('curator', models.TextField(blank=True, null=True)),
                ('parent_id', models.FloatField(blank=True, null=True)),
                ('level', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'ontology_term',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pathway',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('smpdb_id', models.TextField()),
                ('kegg_map_id', models.TextField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'pathway',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PpRecipes',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('i', models.BigIntegerField(blank=True, null=True)),
                ('name_tokens', models.TextField(blank=True, null=True)),
                ('ingredient_tokens', models.TextField(blank=True, null=True)),
                ('steps_tokens', models.TextField(blank=True, null=True)),
                ('techniques', models.TextField(blank=True, null=True)),
                ('calorie_level', models.BigIntegerField(blank=True, null=True)),
                ('ingredient_ids', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pp_recipes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PpUsers',
            fields=[
                ('u', models.BigIntegerField(primary_key=True, serialize=False)),
                ('techniques', models.TextField(blank=True, null=True)),
                ('items', models.TextField(blank=True, null=True)),
                ('n_items', models.BigIntegerField(blank=True, null=True)),
                ('ratings', models.TextField(blank=True, null=True)),
                ('n_ratings', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pp_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawInteractions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.BigIntegerField(blank=True, null=True)),
                ('recipe_id', models.BigIntegerField(blank=True, null=True)),
                ('date', models.TextField(blank=True, null=True)),
                ('rating', models.BigIntegerField(blank=True, null=True)),
                ('review', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'raw_interactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawRecipes',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('minutes', models.BigIntegerField(blank=True, null=True)),
                ('contributor_id', models.BigIntegerField(blank=True, null=True)),
                ('submitted', models.TextField(blank=True, null=True)),
                ('tags', models.TextField(blank=True, null=True)),
                ('nutrition', models.TextField(blank=True, null=True)),
                ('n_steps', models.BigIntegerField(blank=True, null=True)),
                ('steps', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('n_ingredients', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'raw_recipes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('ref_type', models.TextField()),
                ('text', models.TextField()),
                ('pubmed_id', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('source_id', models.BigIntegerField()),
                ('source_type', models.TextField()),
            ],
            options={
                'db_table': 'reference',
                'managed': False,
            },
        ),
    ]
